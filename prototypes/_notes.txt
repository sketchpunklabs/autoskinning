// VOXEL GEODESIC AUTO SKINNING
WHITE PAPER   : http://www.delasa.net/data/sca2013_voxelization.pdf
CPU PROTOTYPE : https://bitbucket.org/sketchpunk/sketchpunk.bitbucket.io/src/master/src/threejs/autoskinning/index.html

Fill Voxel Volume : https://bitbucket.org/sketchpunk/sketchpunk.bitbucket.io/src/c036dfb4b5a93425220b4bb482c0e96e1edc77cf/src/threejs/autoskinning/oito/voxel/SolidVoxelizer.js#lines-108

https://bronsonzgeb.com/index.php/2021/06/26/volumetric-heat-diffusion-for-automatic-mesh-skinning/
https://x.com/_naam/status/1436730675319672832?s=20

https://webglfundamentals.org/webgl/lessons/webgl-gpgpu.html

Algorithm : Distance Computation
input     : Character skeleton S and voxelized mesh V
foreach bone bi of S do
    // Initialize voxel distance values
    foreach non-exterior voxel vi of V do
        3 dvi = ∞;
    end
    
    Create empty voxel queue Q;
    
    // Initialize bone voxels and add to queue.
    foreach non-exterior voxel vi of V intersecting with bi do
        dvi = 0;
        Push vi to Q;
    9 end

    // Compute geodesic distances
    while Q not empty do
        Pop vi from Q;
        foreach non-exterior voxel neighbor vj to vi do
            dist = dvi + |pvi − pvj|;
            if dvj > dist then
                dvj = dist;
                Push vj to Q;
            end
        end
    end
end

step1_voxelizeMesh
At the first stage, we need to figure all the voxel cells that intersect
all the triangles of the mesh. The main idea:
1. Loop Every Triangle
2. Compute the Triangle's Bounding Box
3. Using the BoundingBox, find the Range of voxels the triangle exist in.
4. Test each voxel for BBOX-TRIANGLE Intersection.
5. For Every Voxel that intersects a triangle, it's set as active|on in the chunk object.

step2_boneVoxelIntersection
1. Turn Bone Data to a collection of segments
2. Use each segment as a ray to find every active voxel cell that the segment intersects.

step3_voxelCrawler
1. Assign a bone distance of zero for each voxel found.
2. Use each bone's intersected voxel coordinates as the starting point for the Voxel Crawler which
   will access all the active voxels and determine how far each one is from said bone. The idea is
   like the Dijkstra's Shortest Path Algorithm.

step4_computeBoneWeights
1. Grab each vertex from the mesh
2. Compute which voxel it exists in.
3. In the Geodesic object, filter the 4 closest bones in the voxel.
4. Compute the weight based on the vertex & voxel centroid & voxel distance
5. Normalize the 4 weights.
6. Do some extra filtering like removing bones with very little or near zero influence
7. ReNormalize the Weights after the previous filtering
8. With the remaining Weights, get the bone indices.


// https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
/** returns the ray LENGTH, use directionAt() */
export default function intersectAABB( ray:Ray, min: TVec3, max: TVec3 ): [number, number] | null {
    const tMin = new Vec3( min ).sub( ray.posStart );
    const tMax = new Vec3( max ).sub( ray.posStart );
    tMin.div( ray.direction );
    tMax.div( ray.direction );

    const t1    = new Vec3( tMin ).min( tMax );
    const t2    = new Vec3( tMin ).max( tMax );
    const tNear = Math.max( t1[0], t1[1], t1[2] );
    const tFar  = Math.min( t2[0], t2[1], t2[2] );

    return ( tNear < tFar )? [tNear, tFar] : null;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Voxelize Triangle Mesh
Compute : GPGPU

Inputs
-- Triangles > DataTexture : Random Access Needed
-- Voxel Chunk Uniforms

Output : DataTexture RGBA32F - RGB = Normal, A = IsActive
- True/False : Is it intersected
- Triangle Normal : Needed for Volume Filling, 
  Compute from tri points, no need to store in 
  triangle datatexture

Notes:
- Each fragment call runs 1 voxel, test against 
   all triangles till one is found.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2. Voxel Volume Filling
Compute: TransformFeedback

Inputs
- Voxel Chunk > DataTexture : Random Access Needed

Outputs
- True/False : Is voxel active

Pseudo 
for( v in voxels ){
    if( v is active ) set true;
    else{
        // Test if its an inner voxel by looking for an exit
        coord = calcCoord( voxelIndex );
        for( coord.z to minZ ){
            if( v @ coord is active ){
                if( dot( FWD, Tri ) > -0.1 ) set true & break
                else break; We hit an entry voxel instead of an exit one
            }
        }
    }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3. Bone-Voxel Intersection

Inputs
- Bones as Segments > DataTexture : Random Access Needed
- Segment Count

Outputs
- Bool : Is Voxel Active
- Bool : Bone intersects Voxel

Notes:
- Turn bones into a collection of segments
--- Data: HeadPos, TailPos, BoneIndex
--- Vec4: RGB:HeadPos - A:BoneIndex, RGB:TailPos - A:0

- Need to find which voxels the bones occupy
--- Will need to modify Ray-AABB to handle segments
----- Make sure Origin inside cube also works
----- Origin outside but tail inside also works

Pseudo 
for( v in voxels ){
    if( v is active ){
        [ bMin, bMax ] = v.calcBoundingBox();
        let isHit = 0;

        for( s of segments ){
            if( segment_aabb_intersect( s.head, s.tail, bMin, bMax ) ){
                isHit = 1;
                break;
            }
        }

        return [1,isHit];
    }else{
        return [0,0];
    }
}


function buildSkeletonMesh( arm, geo, sWeights, sIndices ){
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Convert Armature to THREE.Skeleton
    const bCnt  = arm.bones.length;
    const bones = new Array( bCnt );
    let   bn;
    for( let b of arm.bones ){
        bn = new THREE.Bone();
        bn.position.fromArray( b.local.pos );
        bn.quaternion.fromArray( b.local.rot );

        bones[ b.idx ] = bn;
        if( b.pidx != null ) bones[ b.pidx ].add( bn );
    }

    const skel = new THREE.Skeleton( bones );               // Final Skeleton
    gSkel = skel;

    const boneview = new THREE.SkeletonHelper( bones[0] );  // THREEJS's Version of Bone View
    App.add( boneview );

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Generate Geometry 
    const bGeo = new THREE.BufferGeometry();
    bGeo.setIndex( new THREE.BufferAttribute( geo.indices.data, 1 ) );
    bGeo.setAttribute( 'position', new THREE.BufferAttribute( geo.position.data, geo.position.componentLen ) );
    bGeo.setAttribute( 'skinWeight', new THREE.BufferAttribute( sWeights, 4 ) );
    bGeo.setAttribute( 'skinIndex',  new THREE.BufferAttribute( sIndices, 4 ) );

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Create Mesh with Skeleton Bound to it.
    const mat  = new THREE.MeshPhongMaterial( { flatShading:true } );
    const mesh = new THREE.SkinnedMesh( bGeo, mat );
    mesh.add( gSkel.bones[ 0 ] );
    mesh.bind( gSkel );

    App.add( (gMesh = mesh) );
}